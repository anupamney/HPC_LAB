#include<stdio.h>
#include<stdlib.h>
#include<omp.h>
#include<iostream>
using namespace std;
int a[10000][1000];
int b[10000][1000];
int c[10000][1000];
int main()
{
int tid;
int i,j;
int rows,cols;

/*printf("Enter Number of Rows of matrices\n");
scanf("%d",&rows);
printf("Enter Number of Columns of matrices\n");
scanf("%d",&cols);*/
rows=10000;
cols=1000;



int *d,*e,*f;

for(i=0;i<rows;i++)
  for(j=0;j<cols;j++)
    {
       a[i][j]=1;
    }

for(i=0;i<rows;i++)
  for(j=0;j<cols;j++)
    {
	b[i][j]=2;
    }

double start_time = omp_get_wtime();
cout<<"chunk size "<<10000000<<endl;
#pragma omp parallel for schedule(static,10000000)

	for(int i=0;i<rows;i++)
	{
		for(int j=0;j<cols;j++)
		{
			c[i][j]=a[i][j]+b[i][j];
		}
	}

#pragma omp barrier
double run_time = omp_get_wtime() - start_time;

cout<<run_time<<endl;
/*for(i=0;i<rows;i++)
  for(j=0;j<cols;j++)
    {
       printf("Value of C[%d][%d]=%d\n",i,j,c[i][j]);
    }*/
    return 0;

}
